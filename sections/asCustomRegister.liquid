<section>
    <div class="container-1170">
        <div>
            <h1>{{ section.settings.as-register-txt }}</h1>
        </div>
        {% form 'create_customer' %}
        <form id="custom-register-form">
            <!-- First Name Field -->
            <div>
                <label for="RegisterForm-FirstName">First Name</label>
                <input type="text" id="RegisterForm-FirstName" name="customer[first_name]" required>
            </div>

            <!-- Last Name Field -->
            <div>
                <label for="RegisterForm-LastName">Last Name</label>
                <input type="text" id="RegisterForm-LastName" name="customer[last_name]" required>
            </div>

            <!-- Gender Field -->
            <div>
                <label for="RegisterForm-Gender">Gender</label>
                <select id="RegisterForm-Gender" name="customer[gender]" required>
                    <option value="">Select Gender</option>
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="other">Other</option>
                </select>
            </div>

            <!-- City Field -->
            <div>
                <label for="RegisterForm-City">City</label>
                <select id="RegisterForm-City" name="customer[city]" required>
                    <option value="">Select Your City</option>
                </select>
            </div>

            <!-- Phone Number Field -->
            <div>
                <label for="RegisterForm-PhoneNumber">Phone Number</label>
                <input type="tel" id="RegisterForm-PhoneNumber" name="customer[phone]" required>
            </div>

            <div class="form-field{% if form.errors contains "email" %} form-field--error{% endif %}">
                <label class="form-label" for="RegisterForm-email">
                    {{ 'customer.register.you_email' | t }}
                    <em>*</em>
                </label>      
                <input class="form-input form-input-placeholder{% if form.errors contains "email" %} error{% endif %}"
                    type="email"
                    name="customer[email]"
                    id="RegisterForm-email"
                    {% if form.email %} value="{{ form.email }}"{% endif %}
                    spellcheck="false"
                    autocapitalize="off"
                    autocomplete="email"
                    aria-required="true"
                    {% if form.errors contains 'email' %}
                        aria-invalid="true"
                        aria-describedby="RegisterForm-email-error"
                    {% endif %}
                    placeholder=""
                    required
                >
            </div>
            <div class="form-field{% if form.errors contains "password" %} form-field--error{% endif %}">
                <label class="form-label" for="password">
                    {{ 'customer.register.you_password' | t }}
                    <em>*</em>
                </label>      
                <input class="form-input form-input-placeholder{% if form.errors contains "password" %} error{% endif %}"
                    type="password"
                    name="customer[password]"
                    id="RegisterForm-password"
                    aria-required="true"
                    {% if form.errors contains 'password' %}
                        aria-invalid="true"
                        aria-describedby="RegisterForm-password-error"
                    {% endif %}
                    placeholder=""
                    required
                >
            </div>

            <!-- Submit Button -->
            <button type="submit">Register</button>
        </form>
        <!-- OTP Input (Hidden initially) -->
        <div id="otp-input" style="display: none;">
            <label for="otp">Enter OTP</label>
            <input type="text" id="user-otp" />
            <button id="otp-submit" style="display: none;">Submit OTP</button>
        </div>
        {% endform %}
    </div>
</section>

<script>
    fetch("https://actopassapidev.actoscript.com/api/City")
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok " + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            const registerCity = document.getElementById("RegisterForm-City");
            registerCity.innerHTML = '<option value="">Select Your City</option>';
            if (data && data.length > 0) {
                data.forEach((city) => {
                    const option = document.createElement("option");
                    option.id = city.CityId;
                    option.value = city.CityName.toLowerCase();
                    option.innerHTML = city.CityName.charAt(0).toUpperCase() + city.CityName.slice(1).toLowerCase();
                    registerCity.appendChild(option);
                });
            }
        })
        .catch(error => {
            console.error("Error fetching cities:", error);
        });
    // Declare otpCheck in the outer scope
    let otpCheck = null;

    // Event listener for the form submission
    document.getElementById('custom-register-form').addEventListener('submit', async function (event) {
        event.preventDefault();

        // Get form field values
        const firstName = document.getElementById('RegisterForm-FirstName').value.trim();
        const lastName = document.getElementById('RegisterForm-LastName').value.trim();
        const gender = document.getElementById('RegisterForm-Gender').value;
        const city = document.getElementById('RegisterForm-City').value;
        const phoneNumber = document.getElementById('RegisterForm-PhoneNumber').value.trim();

        // Sanitize the phone number
        const sanitizedPhoneNumber = phoneNumber.replace(/\D/g, '');
        if (!sanitizedPhoneNumber) {
            alert('Please enter a valid mobile number.');
            return;
        }

        // Validate all required fields
        if (!firstName || !lastName || !gender || !city || !sanitizedPhoneNumber) {
            alert('Please fill in all required fields.');
            return;
        }

        try {
            // Send request to API to generate OTP
            const response = await fetch('https://actopassapidev.actoscript.com/api/Mobile_Login/SearchMobileNo', {
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ MobileNo: sanitizedPhoneNumber }),
            });

            const responseData = await response.json();

            if (response.ok) {
                // Store OTP in the outer-scoped variable
                otpCheck = responseData.otp;
                console.log(otpCheck);
                if (otpCheck) {
                    document.getElementById('otp-input').style.display = 'block';
                    document.getElementById('otp-submit').style.display = 'inline-block';
                } else {
                    alert('Failed to send OTP. Please try again later.');
                }
            }
        } catch (error) {
            console.error('Error sending OTP:', error);
            alert('An error occurred. Please try again.');
        }
    });

    // Event listener for OTP verification
    document.getElementById('otp-submit').addEventListener('click', function () {
        const userOtp = document.getElementById('user-otp').value.trim();

        // Convert both values to the same type for comparison
        if (userOtp === String(otpCheck)) {
            window.location.href = '/'; // Redirect to homepage
        } else {
            alert('Invalid OTP. Please try again.');
        }
    });

</script>



{% schema %}
{
"name": "As custom register",
"settings": [
{
"type": "text",
"id": "as-register-txt",
"label": "Register Text",
"default": "Register"
}
],
"presets": [
{
"name": "As Custom Register"
}
]
}
{% endschema %}